

 <%- include("../layouts/adminAddProductHeader.ejs") %>








<div class="content">
    <div class="header">
        <h1>Edit Product</h1>
    </div>

    <div class="form-container">
        <form action="/admin/updateProduct/<%= product._id %>" method="POST" enctype="multipart/form-data" id="editProductForm">
            <input type="hidden" id="productId" value="<%= product._id %>">
            <div class="form-group">
                <label for="productName">Product Name</label>
                <input type="text" name="productName" class="form-control" id="productName" value="<%= product.name %>">
                <p id="productNameError" style="color: red;" class="error-message"></p>
            </div>

            <div class="form-group">
                <label for="productPrice">Price</label>
                <input type="text" name="productPrice" class="form-control" id="productPrice" value="<%= product.price %>">
                <p id="productPriceError" style="color: red;" class="error-message"></p>
            </div>

            <div class="form-group">
                <label for="productCategory">Category</label>
                <select name="productCategory" class="form-control" id="productCategory">
                    <option value="">Select Category</option>
                    <% categories.forEach(function(category) { %>
                        <option value="<%= category._id %>" <%= category._id.equals(product.category) ? 'selected' : '' %> >
                            <%= category.name %>
                        </option>
                    <% }); %>
                </select>
                <p class="text-danger" id="productCategoryError"></p>
            </div>
            

            <div class="form-group">
                <label for="productBrand">Brand</label>
                <select name="productBrand" class="form-control" id="productBrand">
                    <option value="">Select Brand</option>
                    <% brands.forEach(function(brand) { %>
                        <option value="<%= brand._id %>" <%= brand._id.equals(product.brand) ? 'selected' : '' %> >
                            <%= brand.name %>
                        </option>
                    <% }); %>
                </select>
                <p class="text-danger" id="productBrandError"></p>
            </div>
            

            <div class="form-group">
                <label for="productDescription">Description</label>
                <input type="text" name="productDescription" class="form-control" id="productDescription" value="<%= product.description %>">
                <p id="productDescriptionError" style="color: red;" class="error-message"></p>
            </div>


            <div class="form-group">
                <label for="productSpecifications">Specifications</label>
                <div id="specificationsContainer">
                    <% if (product.specification && product.specification.length > 0) { %>
                        <% product.specification.forEach((spec, index) => { %>
                            <div class="specification-group">
                                <input type="text" name="specifications[<%= index %>][key]" class="form-control" placeholder="Key" value="<%= spec.key %>" >
                                <p class="error-message spec-key-error" style="color: red;"></p>
                                <input type="text" name="specifications[<%= index %>][value]" class="form-control mt-2" placeholder="Value" value="<%= spec.value %>" >
                                <p class="error-message spec-value-error" style="color: red;"></p>
                                <button class="remove-btn btn-danger">Remove</button>
                            </div>
                        <% }); %>
                    <% } else { %>
                        <div class="specification-group">
                            <input type="text" name="specifications[0][key]" class="form-control" placeholder="Key" >
                            <p class="error-message spec-key-error" style="color: red;"></p>
                            <input type="text" name="specifications[0][value]" class="form-control mt-2" placeholder="Value" >
                            <p class="error-message spec-value-error" style="color: red;"></p>
                        </div>
                    <% } %>
                </div>
                <button type="button" id="addSpecification" class="btn btn-secondary mt-2">Add Specification</button>
            </div>


            <div class="form-group">
                <label for="productVariants">Varients</label>
                <div id="variantsContainer">
                    <% if (product.varients && product.varients.length > 0) { %>
                        <% product.varients.forEach((variant, variantIndex) => { %>
                            <div class="variant-group" data-variant-id="<%= variantIndex %>">
                                <label>Variant <%= variantIndex + 1 %></label>
                                <input type="text" class="form-control" placeholder="Color" name="productVarients[<%= variantIndex %>][color]" value="<%= variant.color.color %>">
                                <p class="error-message color-error" style="color: red;"></p>
                                <input type="text" class="form-control mt-2" placeholder="Color Code" name="productVarients[<%= variantIndex %>][colorCode]" value="<%= variant.color.colorCode %>">
                                <p class="error-message color-code-error" style="color: red;"></p>
                                <input type="number" class="form-control mt-2" placeholder="Stock" name="productVarients[<%= variantIndex %>][stock]" value="<%= variant.stock %>">
                                <p class="error-message stock-error" style="color: red;"></p>

                               
                                <div class="image-previews">
                                    <% variant.images.filter(image => image !== null && image !== undefined).forEach((image, imageIndex) => { %>
                                        <div class="img-preview-container">
                                            <img src="<%= image.url %>" class="img-fluid mb-2" style="max-width: 200px;" data-image-index="<%= imageIndex %>">
                                            <input type="file" class="form-control-file variant-image-upload mt-2" name="varients[<%=variantIndex%>][images][<%= imageIndex %>]" data-image-index="<%= imageIndex %>">
                                            <input type="hidden" name="varients[<%=variantIndex%>][existingImages][<%= imageIndex %>]" value="<%= image.url %>">
                                            <input type="hidden" name="varients[<%=variantIndex%>][imageStatus][<%= imageIndex %>]" value="unchanged">
                                            <button type="button" class="btn btn-danger btn-sm mt-2 delete-image" data-image-id="<%= image._id %>">Delete</button>
                                            <button type="button" class="btn btn-secondary btn-sm crop-image mt-2">Crop</button>
                                        </div>
                                    <% }) %>
                                </div>
                                

                                <button type="button" class="btn btn-danger mt-2 remove-variant">Remove Variant</button>
                            </div>
                        <% }); %>
                    <% } %>
                </div>
                <input type="hidden" id="addVariant" class="btn btn-secondary mt-2"></input>
            </div>

            <button type="submit" class="btn btn-primary">Save Changes</button>
        </form>
        <br>
       <a href="/admin/product"> <button type="submit" class="btn btn-primary">Go Back</button></a>
    </div>
</div>






  <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    $(document).ready(function() {
        let specificationCount = $('#specificationsContainer .specification-group').length;
        let variantCount = $('#variantsContainer .variant-group').length;
    
        // Add new specification input fields
        $('#addSpecification').click(function() {
            $('#specificationsContainer').append(`
                <div class="specification-group">
                    <input type="text" name="specifications[${specificationCount}][key]" class="form-control" placeholder="Key" >
                    <input type="text" name="specifications[${specificationCount}][value]" class="form-control mt-2" placeholder="Value" >
                    <button type="button" class="btn btn-danger mt-2 remove-btn">Remove Specification</button>
                </div>
            `);
            specificationCount++;
        });
    
        // Remove specification input fields
        $('#specificationsContainer').on('click', '.remove-btn', function() {
            $(this).parent().remove();
        });
    
        


    
        let cropper;
        let currentImageElement;
        let currentFileInput;

        $(document).ready(function() {
                    $('#variantsContainer').on('change', '.variant-image-upload', function(e) {
                        const file = e.target.files[0];
                        const imgElement = $(this).closest('.img-preview-container').find('img');

                        if (file) {
                            const reader = new FileReader();
                    reader.onload = function(event) {
                        imgElement.attr('src', event.target.result);
                        $(this).closest('.img-preview-container').find('input[name$="[imageStatus]"]').val('changed');
                    }.bind(this);

                    reader.readAsDataURL(file);
                }
            });
        });



        $('#variantsContainer').on('click', '.crop-image', function() {
            currentImageElement = $(this).closest('.img-preview-container').find('img')[0];
            currentFileInput = $(this).closest('.img-preview-container').find('.variant-image-upload')[0];
            
            $('#cropperImage').attr('src', currentImageElement.src);
            $('#cropperModal').modal('show');

            if (cropper) {
                cropper.destroy();
            }

            cropper = new Cropper($('#cropperImage')[0], {
                aspectRatio: 1,
                viewMode: 1,
                autoCropArea: 1,
                minCropBoxWidth: 200,
                minCropBoxHeight: 200,
            });
        });

        $('#cropImage').click(function() {
            if (!cropper) return;

            const canvas = cropper.getCroppedCanvas({
                width: 400,
                height: 400
            });

            canvas.toBlob(function(blob) {
                const url = URL.createObjectURL(blob);
                $(currentImageElement).attr('src', url);

                const croppedFile = new File([blob], "cropped_image.jpg", { type: "image/jpeg" });
                const dataTransfer = new DataTransfer();
                dataTransfer.items.add(croppedFile);
                currentFileInput.files = dataTransfer.files;

                $(currentFileInput).closest('.img-preview-container').find('input[name$="[imageStatus]"]').val('changed');

                $('#cropperModal').modal('hide');
            }, 'image/jpeg');
        });


        $('#variantsContainer').on('click', '.remove-image', function() {
            const container = $(this).closest('.img-preview-container');
            container.find('input[name$="[imageStatus]"]').val('removed');
            container.hide();
        });


    });


























    document.addEventListener('DOMContentLoaded', function() {
    const editProductForm = document.getElementById('editProductForm');
    const addSpecificationButton = document.getElementById('addSpecification');
    const addVariantButton = document.getElementById('addVariant');
    const productId = document.getElementById('productId').value; // Get the product ID from the hidden input
    let specificationCount = document.querySelectorAll('.specification-group').length;
    let variantCount = document.querySelectorAll('.variant-group').length;

   

    // Remove specification
    document.getElementById('specificationsContainer').addEventListener('click', function(e) {
        if (e.target.classList.contains('remove-btn')) {
            e.target.closest('.specification-group').remove();
        }
    });

    // Add new variant
    addVariantButton.addEventListener('click', function() {
        const container = document.getElementById('variantsContainer');
        const newVariant = document.createElement('div');
        newVariant.className = 'variant-group';
        newVariant.dataset.variantId = variantCount;
        newVariant.innerHTML = `
            <label>Variant ${variantCount + 1}</label>
            <input type="text" class="form-control" placeholder="Color" name="productVarients[${variantCount}][color]">
            <p class="error-message color-error"></p>
            <input type="text" class="form-control mt-2" placeholder="Color Code" name="productVarients[${variantCount}][colorCode]">
            <p class="error-message color-code-error"></p>
            <input type="number" class="form-control mt-2" placeholder="Stock" name="productVarients[${variantCount}][stock]">
            <p class="error-message stock-error"></p>
            <div class="form-group mt-2">
                <label>Images for Variant ${variantCount + 1}</label>
                <input type="file" name="varients[${variantCount}][images]" class="form-control-file variant-images" multiple>
                <p class="error-message images-error"></p>
            </div>
            <div class="image-previews"></div>
            <button type="button" class="btn btn-danger mt-2 remove-variant">Remove Variant</button>
        `;
        container.appendChild(newVariant);
        variantCount++;
    });

    // Remove variant
    document.getElementById('variantsContainer').addEventListener('click', function(e) {
        if (e.target.classList.contains('remove-variant')) {
            e.target.closest('.variant-group').remove();
            variantCount--;
        }
    });

    // Form submission and validation
    editProductForm.addEventListener('submit', async function(e) {
        e.preventDefault();

        const formData = new FormData(this);
        
        const variantGroups = document.querySelectorAll('.variant-group');
        let globalErrors = [];

        // Clear previous errors
        document.querySelectorAll('.error-message').forEach(el => el.textContent = '');

        // Validate product name
        const productName = formData.get('productName');
        if (productName.length < 8) {
            globalErrors.push('Product Name needs at least 8 characters');
            document.getElementById('productNameError').textContent = 'Product Name needs at least 8 characters';
        }

        // Validate price
        const productPrice = formData.get('productPrice');
        if (isNaN(productPrice) || productPrice < 1) {
            globalErrors.push('Product Price must be a number and minimum 1');
            document.getElementById('productPriceError').textContent = 'Product Price must be a number and minimum 1';
        }
        
        const productCategory = formData.get('productCategory');
        if (!productCategory || productCategory === '') {
            globalErrors.push('Category is required');
            document.getElementById('productCategoryError').textContent = 'Category is required';
        }

        const productBrand = formData.get('productBrand');
        if (!productBrand || productBrand === '') {
            globalErrors.push('Brand is required');
            document.getElementById('productBrandError').textContent = 'Brand is required';
        }

        // Validate description
        const productDescription = formData.get('productDescription');
        if (productDescription.length < 20) {
            globalErrors.push('Product Description needs at least 20 characters');
            document.getElementById('productDescriptionError').textContent = 'Product Description needs at least 20 characters';
        }

        // Validate specifications
        const specifications = document.querySelectorAll('.specification-group');
        if (specifications.length === 0) {
            globalErrors.push('At least one specification is required');
        } else {
            specifications.forEach((spec, index) => {
                const key = spec.querySelector('input[name$="[key]"]').value;
                const value = spec.querySelector('input[name$="[value]"]').value;
                if (key.length < 2) {
                    globalErrors.push(`Specification ${index + 1} key needs at least 2 characters`);
                    spec.querySelector('.spec-key-error').textContent = 'Key needs at least 2 characters';
                }
                if (value.length < 2) {
                    globalErrors.push(`Specification ${index + 1} value needs at least 2 characters`);
                    spec.querySelector('.spec-value-error').textContent = 'Value needs at least 2 characters';
                }
            });
        }

        // Validate variants
        variantGroups.forEach((group, index) => {
            const color = group.querySelector('input[name$="[color]"]').value;
            const colorCode = group.querySelector('input[name$="[colorCode]"]').value;
            const stock = group.querySelector('input[name$="[stock]"]').value;
            const images = group.querySelectorAll('.img-preview-container');

            if (!color.trim()) {
                globalErrors.push(`Variant ${index + 1} color is required`);
                group.querySelector('.color-error').textContent = 'Color is required';
            }

            if (!colorCode.match(/^#[0-9A-F]{6}$/i)) {
                globalErrors.push(`Variant ${index + 1} has an invalid color code`);
                group.querySelector('.color-code-error').textContent = 'Invalid color code format';
            }

            if (isNaN(stock) || stock <=0) {
                globalErrors.push(`Variant ${index + 1} stock must be a non-negative number`);
                group.querySelector('.stock-error').textContent = 'Stock must be a non-negative number';
            }

            // if (images.length < 3) {
            //     globalErrors.push(`Variant ${index + 1} needs at least 3 images`);
            //     group.querySelector('.images-error').textContent = 'At least 3 images are required';
            // }
        });

        if (globalErrors.length > 0) {
            document.getElementById('globalErrorMessages').innerHTML = globalErrors.join('<br>');
            return; // Prevent form submission
        }
        
        

        // If validation passes, submit the form
        try {
            const response = await fetch('/admin/updateProduct/' + productId, {
                method: 'POST',
                body: formData

            });

            const data = await response.json();

            if (data.success) {
                Swal.fire({
                    title: 'Success!',
                    text: data.message,
                    icon: 'success',
                    confirmButtonText: 'OK'
                }).then((result) => {
                    if (result.isConfirmed) {
                        window.location.href = '/admin/product';
                    }
                });
            } else {
                
                // Handle validation errors from server
                const validationErrors = data.validationErrors || {};
                Object.keys(validationErrors).forEach(key => {
                    const errorElement = document.getElementById(`${key}Error`);
                    if (errorElement) {
                        errorElement.textContent = validationErrors[key];
                    }
                });
            }
        } catch (error) {
         
            console.error('Error:', error);
            Swal.fire({
                title: 'Error!',
                text: 'An error occurred while updating the product.',
                icon: 'error',
                confirmButtonText: 'OK'
            });
        }
    });
});
    </script>
    

    <!-- Cropper Modal -->
<div class="modal fade" id="cropperModal" tabindex="-1" role="dialog" aria-labelledby="cropperModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="cropperModalLabel">Crop Image</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div>
                    <img id="cropperImage" src="" alt="Image to crop" style="max-width: 100%;">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="cropImage">Crop</button>
            </div>
        </div>
    </div>
</div>

<script>
 document.addEventListener("DOMContentLoaded", function() {
    const deleteButtons = document.querySelectorAll(".delete-image");

    deleteButtons.forEach(button => {
        button.addEventListener("click", function() {
            const imageId = this.getAttribute("data-image-id");

            // Display SweetAlert confirmation dialog
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    // If confirmed, proceed with the deletion
                    fetch(`/admin/deleteImage/${imageId}`, {
                        method: 'DELETE',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    })
                    .then(response => {
                        if (response.ok) {
                            // Remove the image from the page
                            this.closest(".img-preview-container").remove();
                            Swal.fire(
                                'Deleted!',
                                'Your image has been deleted.',
                                'success'
                            );
                        } else {
                            Swal.fire(
                                'Error!',
                                'Failed to delete image.',
                                'error'
                            );
                        }
                    });
                }
            });
        });
    });
});


</script>

<%- include("../layouts/footer.ejs") %>






